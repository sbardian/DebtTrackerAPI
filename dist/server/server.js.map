{"version":3,"sources":["../../src/server/server.js"],"names":["express","require","bodyParser","apiRoutes","session","mongoose","bluebird","cors","MongoStore","routesLogic","server","init","expressServer","corsOptions","credentials","origin","use","connect","useMongoClient","promiseLibrary","db","connection","on","console","error","bind","once","secret","resave","saveUninitialized","store","mongooseConnection","autoRemove","autoRemoveInterval","urlencoded","extended","json","req","res","next","userId","redirect","checkAuth","expressStatic","static","disableDotRule","verbose","module","exports"],"mappings":";;AAIA;;;;AAGA;;;;;;AANA,MAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,MAAMC,aAAaD,QAAQ,aAAR,CAAnB;AACA,MAAME,YAAYF,QAAQ,aAAR,CAAlB;;AAEA,MAAMG,UAAUH,QAAQ,iBAAR,CAAhB;AACA,MAAMI,WAAWJ,QAAQ,UAAR,CAAjB;;AAEA,MAAMK,WAAWL,QAAQ,UAAR,CAAjB;AACA,MAAMM,OAAON,QAAQ,MAAR,CAAb;AACA,MAAMO,aAAaP,QAAQ,eAAR,EAAyBG,OAAzB,CAAnB;AACA,MAAMK,cAAcR,QAAQ,eAAR,CAApB;;AAEA,MAAMS,SAAS;AACb;;;;;AAKAC,SAAO;AACL,UAAMC,gBAAgBZ,SAAtB;;AAEA,UAAMa,cAAc;AAClBC,mBAAa,IADK;AAElBC,cAAQ;AAFU,KAApB;;AAKAH,kBAAcI,GAAd,CAAkBT,KAAKM,WAAL,CAAlB;;AAEAR,aAASY,OAAT,CACI,iCADJ,EAEI,EAAEC,gBAAgB,IAAlB;AACEC,sBAAgBb;AADlB,KAFJ;;AAMA,UAAMc,KAAKf,SAASgB,UAApB;;AAEA;AACAD,OAAGE,EAAH,CAAM,OAAN,EAAeC,QAAQC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,EAA4B,mBAA5B,CAAf;AACAH,OAAGM,IAAH,CAAQ,MAAR,EAAgB,YAAY;AAC1B;AACD,KAFD;;AAIA;AACA;AACAd,kBAAcI,GAAd,CAAkBZ,QAAQ;AACxBuB,cAAQ,oBADgB;AAExBC,cAAQ,KAFgB;AAGxBC,yBAAmB,IAHK;AAIxBC,aAAO,IAAItB,UAAJ,CAAe;AACpBuB,4BAAoBX,EADA;AAEpBY,oBAAY,UAFQ;AAGpBC,4BAAoB;AAHA,OAAf;AAJiB,KAAR,CAAlB;;AAWA;AACA;AACArB,kBAAcI,GAAd,CAAkBd,WAAWgC,UAAX,CAAsB,EAACC,UAAU,IAAX,EAAtB,CAAlB;AACAvB,kBAAcI,GAAd,CAAkBd,WAAWkC,IAAX,EAAlB;;AAEAxB,kBAAcI,GAAd,CAAkB,UAAUqB,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAC1C,UAAI,CAACF,IAAIjC,OAAJ,CAAYoC,MAAjB,EAAyB;AACvB,eAAOF,IAAIG,QAAJ,CAAa,QAAb,CAAP;AACD,OAFD,MAEO;AACLF;AACD;AACF,KAND;;AAQA;AACA3B,kBAAcI,GAAd;;AAEA;AACA;AACAJ,kBAAcI,GAAd,CAAkB,MAAlB,EAA0BP,YAAYiC,SAAtC,EAAiDvC,SAAjD;;AAEA;AACA,UAAMwC,gBAAgB3C,QAAQ4C,MAAR,CAAe,aAAf,CAAtB;AACAhC,kBAAcI,GAAd,CAAkB2B,aAAlB;AACA/B,kBAAcI,GAAd,CAAkB,yCAAmB;AACnC6B,sBAAgB,IADmB;AAEnCC,eAAS;AAF0B,KAAnB,CAAlB;AAIAlC,kBAAcI,GAAd,CAAkB2B,aAAlB;;AAEA,WAAO/B,aAAP;AACD;AAzEY,CAAf;;AA4EAmC,OAAOC,OAAP,GAAiBtC,MAAjB","file":"server.js","sourcesContent":["\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst apiRoutes = require('./apiRoutes');\nimport authRoutes from './authRoutes';\nconst session = require('express-session');\nconst mongoose = require('mongoose');\nimport historyApiFallback from 'connect-history-api-fallback';\nconst bluebird = require('bluebird');\nconst cors = require('cors');\nconst MongoStore = require('connect-mongo')(session);\nconst routesLogic = require('./routesLogic');\n\nconst server = {\n  /**\n   * Initialize server, and routes.\n   *\n   * @returns {express} expressServer - The express server instance.\n   */\n  init() {\n    const expressServer = express();\n\n    const corsOptions = {\n      credentials: true,\n      origin: true,\n    };\n\n    expressServer.use(cors(corsOptions));\n\n    mongoose.connect(\n        'mongodb://localhost/DeptTracker',\n        { useMongoClient: true,\n          promiseLibrary: bluebird,\n        });\n\n    const db = mongoose.connection;\n\n    //handle mongo error\n    db.on('error', console.error.bind(console, 'connection error:'));\n    db.once('open', function () {\n      // we're connected!\n    });\n\n    // use sessions for tracking logins\n    // TODO: use env var for secret, using npm script\n    expressServer.use(session({\n      secret: 'shit sandwich dawg',\n      resave: false,\n      saveUninitialized: true,\n      store: new MongoStore({\n        mongooseConnection: db,\n        autoRemove: 'interval',\n        autoRemoveInterval: 10,\n      })\n    }));\n\n    // configure server to use bodyParser()\n    // this will let us get the data from a POST\n    expressServer.use(bodyParser.urlencoded({extended: true}));\n    expressServer.use(bodyParser.json());\n\n    expressServer.use(function (req, res, next) {\n      if (!req.session.userId) {\n        return res.redirect('/login');\n      } else {\n        next();\n      }\n    });\n\n    // route to login/register/logout\n    expressServer.use(authRoutes);\n\n    // REGISTER OUR API ROUTES\n    // all of our routes will be prefixed with /api\n    expressServer.use('/api', routesLogic.checkAuth, apiRoutes);\n\n    // middleware to use for all requests\n    const expressStatic = express.static('dist/client');\n    expressServer.use(expressStatic);\n    expressServer.use(historyApiFallback({\n      disableDotRule: true,\n      verbose: true,\n    }));\n    expressServer.use(expressStatic);\n\n    return expressServer;\n  }\n};\n\nmodule.exports = server;\n"]}