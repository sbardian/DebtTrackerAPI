{"version":3,"sources":["../../../src/server/models/User.js"],"names":["mongoose","require","bcrypt","UserSchema","Schema","email","type","String","unique","trim","username","password","passwordConf","statics","authenticate","callback","User","findOne","exec","err","user","Error","status","compare","result","pre","next","hash","model","module","exports"],"mappings":";;AAAA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;AACA,IAAIC,SAASD,QAAQ,QAAR,CAAb;;AAEA,IAAIE,aAAa,IAAIH,SAASI,MAAb,CAAoB;AACnCC,SAAO;AACLC,UAAMC,MADD;AAELC,YAAQ,IAFH;AAGLP,aAAS,IAHJ;AAILQ,UAAM;AAJD,GAD4B;AAOnCC,YAAU;AACRJ,UAAMC,MADE;AAERC,YAAQ,IAFA;AAGRP,aAAS,IAHD;AAIRQ,UAAM;AAJE,GAPyB;AAanCE,YAAU;AACRL,UAAMC,MADE;AAERN,aAAS;AAFD,GAbyB;AAiBnCW,gBAAc;AACZN,UAAMC,MADM;AAEZN,aAAS;AAFG;AAjBqB,CAApB,CAAjB;;AAuBA;AACAE,WAAWU,OAAX,CAAmBC,YAAnB,GAAkC,UAAUT,KAAV,EAAiBM,QAAjB,EAA2BI,QAA3B,EAAqC;AACrEC,OAAKC,OAAL,CAAa,EAAEZ,OAAOA,KAAT,EAAb,EACKa,IADL,CACU,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACzB,QAAID,GAAJ,EAAS;AACP,aAAOJ,SAASI,GAAT,CAAP;AACD,KAFD,MAEO,IAAI,CAACC,IAAL,EAAW;AAChB,YAAMD,MAAM,IAAIE,KAAJ,CAAU,iBAAV,CAAZ;AACAF,UAAIG,MAAJ,GAAa,GAAb;AACA,aAAOP,SAASI,GAAT,CAAP;AACD;AACDjB,WAAOqB,OAAP,CAAeZ,QAAf,EAAyBS,KAAKT,QAA9B,EAAwC,UAAUQ,GAAV,EAAeK,MAAf,EAAuB;AAC7D,UAAIA,WAAW,IAAf,EAAqB;AACnB,eAAOT,SAAS,IAAT,EAAeK,IAAf,CAAP;AACD,OAFD,MAGK;AACH,eAAOL,UAAP;AACD;AACF,KAPD;AAQD,GAjBL;AAkBD,CAnBD;;AAqBA;AACAZ,WAAWsB,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACrC,QAAMN,OAAO,IAAb;AACAlB,SAAOyB,IAAP,CAAYP,KAAKT,QAAjB,EAA2B,EAA3B,EAA+B,UAAUQ,GAAV,EAAeQ,IAAf,EAAqB;AAClD,QAAIR,GAAJ,EAAS;AACP,aAAOO,KAAKP,GAAL,CAAP;AACD;AACDC,SAAKT,QAAL,GAAgBgB,IAAhB;AACAD;AACD,GAND;AAOD,CATD;;AAWA,MAAMV,OAAOhB,SAAS4B,KAAT,CAAe,MAAf,EAAuBzB,UAAvB,CAAb;;AAEA0B,OAAOC,OAAP,GAAiBd,IAAjB","file":"User.js","sourcesContent":["let mongoose = require('mongoose');\nlet bcrypt = require('bcrypt');\n\nlet UserSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    unique: true,\n    require: true,\n    trim: true,\n  },\n  username: {\n    type: String,\n    unique: true,\n    require: true,\n    trim: true,\n  },\n  password: {\n    type: String,\n    require: true,\n  },\n  passwordConf: {\n    type: String,\n    require: true,\n  },\n});\n\n// authenticate input against database\nUserSchema.statics.authenticate = function (email, password, callback) {\n  User.findOne({ email: email })\n      .exec(function (err, user) {\n        if (err) {\n          return callback(err);\n        } else if (!user) {\n          const err = new Error('User not found.');\n          err.status = 401;\n          return callback(err);\n        }\n        bcrypt.compare(password, user.password, function (err, result) {\n          if (result === true) {\n            return callback(null, user);\n          }\n          else {\n            return callback();\n          }\n        });\n      });\n}\n\n// hashing a password before storing it to the database\nUserSchema.pre('save', function (next) {\n  const user = this;\n  bcrypt.hash(user.password, 10, function (err, hash) {\n    if (err) {\n      return next(err);\n    }\n    user.password = hash;\n    next();\n  });\n});\n\nconst User = mongoose.model('User', UserSchema);\n\nmodule.exports = User;"]}