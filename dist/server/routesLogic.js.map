{"version":3,"sources":["../../src/server/routesLogic.js"],"names":["CreditCard","require","Total","User","routesLogic","login","req","res","next","console","log","body","email","password","authenticate","error","user","err","Error","status","session","userId","_id","set","location","send","username","register","passwordConf","userData","create","logout","destroy","redirect","addCreditCard","db","response","name","limit","balance","interest_rate","save","message","id","updated_at","__v","v","json","getAllCreditCards","findById","exec","find","data","sort","getCreditCardByID","params","putOrUpdate","initialData","undefined","deleteCreditCard","remove","getTotals","addTotal","total","deleteTotal","checkAuth","end","module","exports"],"mappings":"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","file":"routesLogic.js","sourcesContent":["/**\n * Created by sbardian on 12/13/16.\n */\n'use strict'\n\nconst CreditCard = require('./models/CreditCard');\nconst Total = require('./models/Total');\nconst User = require('./models/User');\n\nconst routesLogic = {\n\n  /**\n   * Login|Auth to the app\n   *\n   * @param req the request\n   * @param res the response\n   * @param next\n   */\n  login(req, res, next) {\n    console.log('login request');\n    if (req.body.email && req.body.password) {\n      User.authenticate(req.body.email, req.body.password, function (error, user) {\n        if (error || !user) {\n          let err = new Error('Wrong email or password.');\n          err.status = 401;\n          return next(err);\n        } else {\n          req.session.userId = user._id;\n          console.log('login req session = ', req.session.userId);\n          res.set({\n            location: '/',\n          });\n          return res.status(301).send(req.session.username);\n        }\n      });\n    }\n    else {\n      console.log('error on body - ', req.body);\n    }\n  },\n\n  /**\n   * Register to the app\n   *\n   * @param req\n   * @param res\n   * @param next\n   * @returns {*}\n   */\n  register(req, res, next) {\n    // confirm that user typed same password twice\n    if (req.body.password !== req.body.passwordConf) {\n      let err = new Error('Passwords do not match.');\n      err.status = 400;\n      res.send(\"passwords dont match\");\n      return next(err);\n    }\n    if (req.body.email &&\n        req.body.username &&\n        req.body.password &&\n        req.body.passwordConf) {\n      let userData = {\n        email: req.body.email,\n        username: req.body.username,\n        password: req.body.password,\n        passwordConf: req.body.passwordConf,\n      };\n      User.create(userData, function (error, user) {\n        if (error) {\n          return next(error);\n        } else {\n          req.session.userId = user._id;\n          console.log('register req = ', req.session);\n          res.set({\n            location: '/',\n          });\n          return res.status(301).send(req.session.username);\n        }\n      });\n    } else {\n      let err = new Error('All fields required.');\n      err.status = 400;\n      return next(err);\n    }\n  },\n\n  /**\n   * Logout from the app\n   *\n   * @param req the request\n   * @param res the response\n   * @param next\n   */\n  logout(req, res, next) {\n    console.log('logout req = ', req.session.destroy);\n    if (req.session) {\n      // delete session object\n      req.session.destroy(function (err) {\n        if (err) {\n          return next(err);\n        } else {\n          console.log('logoooout');\n          return res.redirect('http://localhost:8080/login');\n        }\n      });\n    }\n  },\n\n  /**\n   * Add a new credit card to the database.\n   *\n   * @param req the request\n   * @param res the response\n   */\n  addCreditCard(req, res) {\n    const db = new CreditCard();\n    let response = {};\n    db.userId = req.session.userId;\n    db.user = req.body.user;\n    db.name = req.body.name;\n    db.limit = req.body.limit;\n    db.balance = req.body.balance;\n    db.interest_rate = req.body.interest_rate;\n    db.save((err) => {\n      if (err) {\n        response = { error: true, message: 'Error adding data' };\n      } else {\n        response = {\n          error: false,\n          message: 'Data added',\n          _id: db.id,\n          updated_at: db.updated_at,\n          __v: db.v,\n        };\n      }\n      res.json(response);\n    });\n  },\n\n  /**\n   * Get all the credit cards in the database.\n   *\n   * @param req the request\n   * @param res the response\n   */\n  getAllCreditCards(req, res, next) {\n    // TODO: Update to use query to sort (ex: 'sort=balance', 'sort=interest_rate'.\n    console.log('getAllCreditCards req session = ', req.session.userId);\n    User.findById(req.session.userId)\n        .exec(function (error, user) {\n          if (error) {\n            console.log('error = ', error);\n            return next(error);\n          } else {\n            if (user === null) {\n              console.log('no user object');\n              return res.redirect('/login');\n            } else {\n              console.log('session = ', req.session.userId);\n              let response = {};\n              CreditCard.find({ userId: req.session.userId }, (err, data) => {\n                if (err) {\n                  response = { error: true, message: 'Error fetching data' };\n                } else {\n                  response = { error: false, message: data };\n                }\n                res.json(response);\n              }).sort([['balance', 'descending']]);\n            }\n          }\n        });\n  },\n\n  /**\n   * Get a specific credit card by its ID\n   *\n   * @param req the request\n   * @param res the response\n   */\n  getCreditCardByID(req, res) {\n    let response = {};\n    CreditCard.findById(req.params.id, (err, data) => {\n      if (err) {\n        response = { error: true, message: 'Error fetching data' };\n      } else {\n        response = { error: false, message: data };\n      }\n      res.json(response);\n    });\n  },\n\n  /**\n   * Add or update (if exists) a credit card.\n   *\n   * @param req the request\n   * @param res the response\n   */\n  putOrUpdate(req, res) {\n    let response = {};\n    CreditCard.findById(req.params.id, (err, initialData) => {\n      const data = initialData;\n      data.userId = req.session.userId;\n      if (err) {\n        response = { error: true, message: 'Error fetching data' };\n      } else {\n        if (req.body.name !== undefined) {\n          data.name = req.body.name;\n        }\n        if (req.body.limit !== undefined) {\n          data.limit = req.body.limit;\n        }\n        if (req.body.balance !== undefined) {\n          data.balance = req.body.balance;\n        }\n        if (req.body.interest_rate !== undefined) {\n          data.interest_rate = req.body.interest_rate;\n        }\n        data.save(() => {\n          if (err) {\n            response = { error: true, message: 'Error updating data' };\n          } else {\n            response = { error: false, message: `Data is updated for ${req.body.name}` };\n          }\n          res.json(response);\n        });\n      }\n    });\n  },\n\n  /**\n   * delete a credit card from the database.\n   *\n   * @param req the request\n   * @param res the response\n   */\n  deleteCreditCard(req, res) {\n    let response = {};\n    CreditCard.findById(req.params.id, (err) => {\n      if (err) {\n        response = { error: true, message: 'Error fetching data' };\n      } else {\n        CreditCard.remove({ _id: req.params.id }, () => {\n          if (err) {\n            response = { error: true, message: 'Error deleting data' };\n          } else {\n            response = { error: false, message: `Data associated with ${req.params.id} is deleted` };\n          }\n          res.json(response);\n        });\n      }\n    });\n  },\n\n  /**\n   * Get credit card totals from the database.\n   *\n   * @param req the request\n   * @param res the response\n   */\n  getTotals(req, res) {\n    let response = {};\n    Total.find({ userId: req.session.userId }, (err, data) => {\n      if (err) {\n        response = { error: true, message: 'Error fetching data' };\n      } else {\n        response = { error: false, message: data };\n      }\n      res.json(response);\n    }).sort([['updated_at', 'descending']]);\n  },\n\n  /**\n   * Add a new Total to the database.\n   *\n   * @param req the request\n   * @param res the response\n   */\n  addTotal(req, res) {\n    const db = new Total();\n    let response = {};\n    db.userId = req.session.userId;\n    db.user = req.body.user;\n    db.total = req.body.total;\n    db.save((err) => {\n      if (err) {\n        response = { error: true, message: 'Error adding data' };\n      } else {\n        response = {\n          error: false,\n          message: 'Data added',\n          id: db.id,\n          updated_at: db.updated_at,\n          v: db.v,\n        };\n      }\n      res.json(response);\n    });\n  },\n\n  /**\n   * Delete a Total from the database.\n   *\n   * @param req the request\n   * @param res the response\n   */\n  deleteTotal(req, res) {\n    let response = {};\n    Total.findById(req.params.id, (err) => {\n      if (err) {\n        response = { error: true, message: 'Error fetching data' };\n      } else {\n        Total.remove({ _id: req.params.id }, () => {\n          if (err) {\n            response = { error: true, message: 'Error deleting data' };\n          } else {\n            response = { error: false, message: `Data associated with ${req.params.id} is deleted` };\n          }\n          res.json(response);\n        });\n      }\n    });\n  },\n\n  /**\n   * Check if a client is authenticated.\n   *\n   */\n  checkAuth(req, res, next) {\n    if (!(req.session && req.session.userId)) {\n      console.log('No Session.');\n      return res.status(401).end();\n    }\n    console.log('Session found: ', req.session.userId);\n    return next();\n  }\n\n};\n\nmodule.exports = routesLogic;\n"]}