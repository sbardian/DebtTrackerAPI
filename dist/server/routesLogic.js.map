{"version":3,"sources":["../../src/server/routesLogic.js"],"names":["CreditCard","require","Total","User","routesLogic","login","req","res","next","console","log","body","email","password","authenticate","error","user","err","Error","status","session","userId","_id","redirect","register","passwordConf","send","username","userData","create","json","logout","destroy","addCreditCard","db","response","name","limit","balance","interest_rate","save","message","id","updated_at","__v","v","getAllCreditCards","findById","exec","find","data","sort","getCreditCardByID","params","putOrUpdate","initialData","undefined","deleteCreditCard","remove","getTotals","addTotal","total","deleteTotal","checkAuth","end","module","exports"],"mappings":"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","file":"routesLogic.js","sourcesContent":["/**\n * Created by sbardian on 12/13/16.\n */\n'use strict'\n\nconst CreditCard = require('./models/CreditCard');\nconst Total = require('./models/Total');\nconst User = require('./models/User');\n\nconst routesLogic = {\n\n  /**\n   * Login|Auth to the app\n   *\n   * @param req the request\n   * @param res the response\n   * @param next\n   */\n  login(req, res, next) {\n    console.log('login request');\n    if (req.body.email && req.body.password) {\n      User.authenticate(req.body.email, req.body.password, function (error, user) {\n        if (error || !user) {\n          let err = new Error('Wrong email or password.');\n          err.status = 401;\n          return next(err);\n        } else {\n          req.session.userId = user._id;\n          console.log('req session = ', req.session.userId);\n          return res.redirect('/');\n        }\n      });\n    }\n    else {\n      console.log('error on body - ', req.body);\n    }\n  },\n\n  /**\n   * Register to the app\n   *\n   * @param req\n   * @param res\n   * @param next\n   * @returns {*}\n   */\n  register(req, res, next) {\n    // confirm that user typed same password twice\n    if (req.body.password !== req.body.passwordConf) {\n      let err = new Error('Passwords do not match.');\n      err.status = 400;\n      res.send(\"passwords dont match\");\n      return next(err);\n    }\n    if (req.body.email &&\n        req.body.username &&\n        req.body.password &&\n        req.body.passwordConf) {\n      let userData = {\n        email: req.body.email,\n        username: req.body.username,\n        password: req.body.password,\n        passwordConf: req.body.passwordConf,\n      };\n      User.create(userData, function (error, user) {\n        if (error) {\n          return next(error);\n        } else {\n          req.session.userId = user._id;\n          console.log('register req = ', req.session);\n          return res.json(user);\n        }\n      });\n    } else {\n      let err = new Error('All fields required.');\n      err.status = 400;\n      return next(err);\n    }\n  },\n\n  /**\n   * Logout from the app\n   *\n   * @param req the request\n   * @param res the response\n   * @param next\n   */\n  logout(req, res, next) {\n    console.log('logout req = ', req.session.destroy);\n    if (req.session) {\n      // delete session object\n      req.session.destroy(function (err) {\n        if (err) {\n          return next(err);\n        } else {\n          console.log('logoooout');\n          return res.redirect('http://localhost:8080/login');\n        }\n      });\n    }\n  },\n\n  /**\n   * Add a new credit card to the database.\n   *\n   * @param req the request\n   * @param res the response\n   */\n  addCreditCard(req, res) {\n    const db = new CreditCard();\n    let response = {};\n    db.user = req.body.user;\n    db.name = req.body.name;\n    db.limit = req.body.limit;\n    db.balance = req.body.balance;\n    db.interest_rate = req.body.interest_rate;\n    db.save((err) => {\n      if (err) {\n        response = { error: true, message: 'Error adding data' };\n      } else {\n        response = {\n          error: false,\n          message: 'Data added',\n          _id: db.id,\n          updated_at: db.updated_at,\n          __v: db.v,\n        };\n      }\n      res.json(response);\n    });\n  },\n\n  /**\n   * Get all the credit cards in the database.\n   *\n   * @param req the request\n   * @param res the response\n   */\n  getAllCreditCards(req, res, next) {\n    // TODO: Update to use query to sort (ex: 'sort=balance', 'sort=interest_rate'.\n    console.log('getAllCreditCards req session = ', req.session.userId);\n    User.findById(req.session.userId)\n        .exec(function (error, user) {\n          if (error) {\n            console.log('error = ', error);\n            return next(error);\n          } else {\n            if (user === null) {\n              console.log('no user object');\n              return res.redirect('/login');\n            } else {\n              console.log('session = ', req.session.userId);\n              let response = {};\n              CreditCard.find({}, (err, data) => {\n                if (err) {\n                  response = { error: true, message: 'Error fetching data' };\n                } else {\n                  response = { error: false, message: data };\n                }\n                res.json(response);\n              }).sort([['balance', 'descending']]);\n            }\n          }\n        });\n  },\n\n  /**\n   * Get a specific credit card by its ID\n   *\n   * @param req the request\n   * @param res the response\n   */\n  getCreditCardByID(req, res) {\n    let response = {};\n    CreditCard.findById(req.params.id, (err, data) => {\n      if (err) {\n        response = { error: true, message: 'Error fetching data' };\n      } else {\n        response = { error: false, message: data };\n      }\n      res.json(response);\n    });\n  },\n\n  /**\n   * Add or update (if exists) a credit card.\n   *\n   * @param req the request\n   * @param res the response\n   */\n  putOrUpdate(req, res) {\n    let response = {};\n    CreditCard.findById(req.params.id, (err, initialData) => {\n      const data = initialData;\n      if (err) {\n        response = { error: true, message: 'Error fetching data' };\n      } else {\n        if (req.body.name !== undefined) {\n          data.name = req.body.name;\n        }\n        if (req.body.limit !== undefined) {\n          data.limit = req.body.limit;\n        }\n        if (req.body.balance !== undefined) {\n          data.balance = req.body.balance;\n        }\n        if (req.body.interest_rate !== undefined) {\n          data.interest_rate = req.body.interest_rate;\n        }\n        data.save(() => {\n          if (err) {\n            response = { error: true, message: 'Error updating data' };\n          } else {\n            response = { error: false, message: `Data is updated for ${req.body.name}` };\n          }\n          res.json(response);\n        });\n      }\n    });\n  },\n\n  /**\n   * delete a credit card from the database.\n   *\n   * @param req the request\n   * @param res the response\n   */\n  deleteCreditCard(req, res) {\n    let response = {};\n    CreditCard.findById(req.params.id, (err) => {\n      if (err) {\n        response = { error: true, message: 'Error fetching data' };\n      } else {\n        CreditCard.remove({ _id: req.params.id }, () => {\n          if (err) {\n            response = { error: true, message: 'Error deleting data' };\n          } else {\n            response = { error: false, message: `Data associated with ${req.params.id} is deleted` };\n          }\n          res.json(response);\n        });\n      }\n    });\n  },\n\n  /**\n   * Get credit card totals from the database.\n   *\n   * @param req the request\n   * @param res the response\n   */\n  getTotals(req, res) {\n    let response = {};\n    Total.find({}, (err, data) => {\n      if (err) {\n        response = { error: true, message: 'Error fetching data' };\n      } else {\n        response = { error: false, message: data };\n      }\n      res.json(response);\n    }).sort([['updated_at', 'descending']]);\n  },\n\n  /**\n   * Add a new Total to the database.\n   *\n   * @param req the request\n   * @param res the response\n   */\n  addTotal(req, res) {\n    const db = new Total();\n    let response = {};\n    db.user = req.body.user;\n    db.total = req.body.total;\n    db.save((err) => {\n      if (err) {\n        response = { error: true, message: 'Error adding data' };\n      } else {\n        response = {\n          error: false,\n          message: 'Data added',\n          id: db.id,\n          updated_at: db.updated_at,\n          v: db.v,\n        };\n      }\n      res.json(response);\n    });\n  },\n\n  /**\n   * Delete a Total from the database.\n   *\n   * @param req the request\n   * @param res the response\n   */\n  deleteTotal(req, res) {\n    let response = {};\n    Total.findById(req.params.id, (err) => {\n      if (err) {\n        response = { error: true, message: 'Error fetching data' };\n      } else {\n        Total.remove({ _id: req.params.id }, () => {\n          if (err) {\n            response = { error: true, message: 'Error deleting data' };\n          } else {\n            response = { error: false, message: `Data associated with ${req.params.id} is deleted` };\n          }\n          res.json(response);\n        });\n      }\n    });\n  },\n\n  /**\n   * Check if a client is authenticated.\n   *\n   */\n  checkAuth(req, res, next) {\n    User.findById(req.session.userId)\n        .exec(function (error, user) {\n          if (error) {\n            console.log('Error authenticating: ', error);\n            return res.status(401).send(error);\n          } else {\n              if (user === null) {\n                console.log('User not found.');\n                return res.status(401).end();\n              } else {\n               return next();\n              }\n            }\n        });\n  }\n\n};\n\nmodule.exports = routesLogic;\n"]}